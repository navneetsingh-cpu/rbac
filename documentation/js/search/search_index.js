var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.319,1,2.105]],["body/controllers/AppController.html",[0,2.108,1,3.363,2,1.873,3,0.57,4,0.57,5,0.428,6,3.129,7,0.648,8,1.141,9,4.481,10,2.687,11,0.039,12,0.911,13,3.801,14,0.911,15,0.714,16,0.497,17,3.22,18,3.801,19,0.73,20,0.73,21,1.684,22,2.687,23,1.013,24,3.801,25,0.031,26,0.031]],["title/modules/AppModule.html",[27,1.076,28,1.846]],["body/modules/AppModule.html",[3,0.422,4,0.422,5,0.316,11,0.039,15,0.808,16,0.368,25,0.025,26,0.025,27,1.617,28,3.457,29,1.246,30,1.246,31,1.547,32,1.547,33,1.246,34,2.146,35,1.547,36,2.314,37,2.314,38,2.314,39,2.795,40,2.795,41,2.795,42,2.146,43,1.547,44,1.547,45,2.81,46,2.774,47,1.742,48,1.016,49,3.209,50,3.416,51,1.742,52,2.81,53,2.81,54,1.617,55,3.898,56,1.409,57,2.416,58,1.274,59,0.918,60,2.81,61,2.81,62,2.81,63,2.416,64,2.81,65,2.81,66,2.81,67,2.81,68,0.54,69,2.81,70,2.314,71,2.81,72,2.81,73,2.81,74,2.81,75,2.314,76,2.314]],["title/injectables/AppService.html",[17,1.846,77,0.284]],["body/injectables/AppService.html",[3,0.575,4,0.575,5,0.432,7,0.653,8,1.147,9,4.495,11,0.039,12,0.92,14,0.92,15,0.575,16,0.502,17,2.966,19,0.736,20,0.736,23,1.022,25,0.031,26,0.031,68,0.736,77,0.456,78,1.253,79,3.157,80,3.835,81,3.835,82,4.784,83,2.111,84,3.835,85,3.157]],["title/injectables/AuditLogInterceptor.html",[77,0.284,86,2.105]],["body/injectables/AuditLogInterceptor.html",[3,0.401,4,0.401,5,0.301,7,0.455,8,0.902,11,0.04,12,0.64,14,0.64,15,0.747,16,0.349,19,0.513,20,0.513,23,0.711,25,0.024,26,0.024,58,1.423,68,0.513,77,0.358,78,0.872,86,2.658,87,3.096,88,2.198,89,3.76,90,3.76,91,3.341,92,4.353,93,4.726,94,2.67,95,0.788,96,0.788,97,0.788,98,1.887,99,4.353,100,3.76,101,2.198,102,3.76,103,2.67,104,3.096,105,3.096,106,1.887,107,1.868,108,2.658,109,2.198,110,2.658,111,3.096,112,3.76,113,3.76,114,2.198,115,2.198,116,2.198,117,2.67,118,3.76,119,2.67,120,2.67,121,1.067,122,2.67,123,2.67,124,2.67,125,2.67,126,2.67,127,2.67,128,2.67,129,4.353,130,2.67,131,2.67,132,2.198,133,2.198]],["title/controllers/AuthController.html",[0,1.319,134,1.846]],["body/controllers/AuthController.html",[0,1.329,2,1.477,3,0.45,4,0.45,5,0.338,7,0.511,8,0.977,10,2.881,11,0.039,12,0.977,14,0.977,15,0.745,16,0.392,19,0.576,20,0.576,21,1.329,23,1.086,25,0.026,26,0.026,58,1.751,59,0.98,68,0.576,95,1.203,96,1.203,97,1.203,108,2.119,134,2.526,135,3.355,136,2.468,137,2.998,138,2.142,139,3.355,140,3.355,141,2.998,142,2.998,143,2.998,144,3.355,145,2.526,146,2.998,147,4.075,148,2.998,149,2.468,150,2.468,151,2.468,152,2.468,153,1.477,154,2.052,155,2.119,156,2.998,157,2.998,158,2.998,159,2.998,160,2.998,161,2.998,162,2.998]],["title/modules/AuthModule.html",[27,1.076,39,1.639]],["body/modules/AuthModule.html",[2,1.832,3,0.394,4,0.394,5,0.296,11,0.04,15,0.845,16,0.344,19,0.505,20,0.505,25,0.024,26,0.024,27,1.56,29,1.165,30,1.165,31,1.447,32,1.447,33,1.165,34,2.376,35,1.447,39,3.13,42,2.047,43,1.447,44,1.447,46,2.306,47,1.629,48,0.95,49,2.164,50,2.629,51,1.629,54,1.344,56,0.95,59,0.859,75,2.164,76,2.164,134,2.676,153,1.295,154,2.279,155,1.858,163,2.164,164,2.164,165,2.164,166,2.831,167,2.831,168,2.831,169,2.628,170,2.628,171,1.858,172,3.719,173,2.628,174,2.628,175,2.628,176,2.628,177,2.628,178,2.628,179,2.164,180,2.628,181,2.628,182,2.628]],["title/injectables/AuthService.html",[77,0.284,154,1.319]],["body/injectables/AuthService.html",[3,0.271,4,0.271,5,0.203,7,0.307,8,0.674,11,0.04,12,0.935,14,0.828,15,0.672,16,0.236,19,0.347,20,0.347,23,1.039,25,0.018,26,0.018,48,0.652,54,1.527,56,1.618,58,1.623,59,0.59,68,0.749,77,0.268,78,0.59,83,2.464,95,1.151,96,1.322,97,1.151,107,1.747,121,1.381,138,1.986,139,2.315,140,2.315,145,1.743,154,1.246,171,1.276,183,1.486,184,2.811,185,1.124,186,1.805,187,2.205,188,4.674,189,2.441,190,2.897,191,2.441,192,1.805,193,2.811,194,1.805,195,2.811,196,1.805,197,1.805,198,2.811,199,3.454,200,1.805,201,1.119,202,1.743,203,1.486,204,1.486,205,1.805,206,1.119,207,0.993,208,2.417,209,1.276,210,1.276,211,2.573,212,1.805,213,1.805,214,1.276,215,2.315,216,1.805,217,1.805,218,3.454,219,1.805,220,1.901,221,1.805,222,1.119,223,1.805,224,1.805,225,1.119,226,2.315,227,1.276,228,1.548,229,1.805,230,1.805,231,1.805,232,1.805,233,1.805,234,1.805,235,1.805,236,2.811,237,1.805,238,1.805,239,1.486,240,1.805,241,1.805,242,1.486,243,1.805,244,1.805,245,1.486,246,1.805,247,1.486,248,1.119,249,3.454,250,1.486,251,1.486,252,1.805,253,1.276,254,1.805,255,2.315,256,1.805]],["title/injectables/InitializationService.html",[41,1.639,77,0.284]],["body/injectables/InitializationService.html",[3,0.385,4,0.385,5,0.289,7,0.437,8,0.877,11,0.04,12,0.877,14,0.615,15,0.736,16,0.336,19,0.493,20,0.493,25,0.024,26,0.024,41,2.012,48,0.927,54,1.539,56,1.321,59,1.195,68,0.493,77,0.348,78,0.838,95,0.757,96,1.449,97,0.757,106,1.813,107,1.773,138,1.703,185,1.462,189,2.584,190,3.254,191,3.011,206,1.59,207,1.412,208,2.266,209,1.813,210,1.813,211,2.556,222,1.59,247,2.112,248,1.59,250,2.112,251,2.112,257,2.112,258,5.101,259,2.565,260,2.565,261,2.565,262,2.565,263,2.565,264,4.259,265,1.412,266,3.656,267,1.59,268,1.59,269,4.642,270,3.656,271,2.565,272,3.656,273,3.656,274,4.642,275,3.656,276,2.565]],["title/injectables/JwtAuthGuard.html",[77,0.284,277,1.846]],["body/injectables/JwtAuthGuard.html",[3,0.445,4,0.445,5,0.334,7,0.506,8,0.97,11,0.039,12,0.97,14,0.712,15,0.742,16,0.388,19,0.57,20,0.57,21,1.315,23,1.078,25,0.026,26,0.026,63,1.839,68,0.777,77,0.386,78,0.97,91,3.496,95,1.195,96,1.195,97,1.195,98,2.097,107,1.072,110,2.097,152,2.443,153,1.462,185,1.186,277,2.508,278,3.791,279,2.443,280,2.86,281,4.046,282,3.791,283,2.443,284,4.397,285,2.967,286,3.331,287,2.967,288,2.097,289,2.097,290,2.967,291,2.097,292,1.839,293,2.967,294,2.967,295,2.86,296,3.331,297,2.967,298,2.443,299,2.967,300,2.443,301,2.967,302,2.967,303,2.967]],["title/injectables/JwtStrategy.html",[77,0.284,167,1.639]],["body/injectables/JwtStrategy.html",[3,0.45,4,0.45,5,0.338,7,0.511,8,0.977,11,0.039,12,0.977,14,0.719,15,0.745,16,0.392,19,0.576,20,0.576,21,1.329,22,2.119,23,0.799,25,0.026,26,0.026,50,3.787,51,1.859,54,1.084,56,1.084,68,0.782,77,0.388,78,0.98,95,1.203,96,1.367,97,1.203,138,1.851,145,1.859,153,1.477,167,2.243,179,2.468,185,1.199,201,1.859,226,2.468,228,1.651,280,2.881,291,2.119,304,2.468,305,3.355,306,3.355,307,2.998,308,2.998,309,4.075,310,2.998,311,2.468,312,2.998,313,2.468,314,2.119,315,2.468,316,2.998,317,2.998,318,2.998,319,2.998,320,2.998,321,2.998,322,2.998,323,2.998,324,2.998,325,2.998]],["title/injectables/LocalStrategy.html",[77,0.284,168,1.639]],["body/injectables/LocalStrategy.html",[3,0.451,4,0.451,5,0.339,7,0.513,8,0.98,11,0.039,12,0.98,14,0.722,15,0.746,16,0.394,19,0.578,20,0.578,21,1.333,23,0.802,25,0.026,26,0.026,58,1.515,68,0.784,77,0.389,78,0.983,83,2.953,95,1.206,96,1.206,97,1.206,107,1.087,121,1.203,138,1.854,153,1.482,154,2.377,155,2.127,168,2.249,185,1.203,201,1.865,202,2.532,204,3.363,211,1.656,214,3.516,220,1.656,280,2.887,291,2.127,305,3.363,306,3.363,311,2.477,313,2.477,314,2.127,326,2.477,327,3.009,328,3.009,329,4.085,330,3.009,331,2.477,332,3.009]],["title/guards/RolesGuard.html",[333,2.105,334,1.846]],["body/guards/RolesGuard.html",[3,0.393,4,0.393,5,0.295,7,0.632,8,0.89,11,0.039,12,0.89,14,0.628,15,0.557,16,0.343,19,0.503,20,0.503,21,1.161,23,0.989,25,0.024,26,0.024,56,1.557,58,0.856,63,2.301,68,0.713,77,0.354,91,3.313,95,1.096,96,1.096,97,1.096,98,1.852,106,1.852,107,1.909,109,2.157,121,1.048,185,1.048,220,1.442,227,1.852,248,1.624,265,2.043,267,1.624,268,1.624,282,3.859,283,2.157,284,4.229,286,3.055,288,1.852,292,1.624,298,2.157,334,2.301,335,2.62,336,2.157,337,2.62,338,2.62,339,3.711,340,2.62,341,3.711,342,2.62,343,2.62,344,2.157,345,2.62,346,3.711,347,2.157,348,2.62,349,2.62,350,2.62,351,2.62,352,2.62,353,3.711,354,2.62,355,3.711,356,2.62,357,2.62,358,2.62,359,2.62,360,2.62,361,2.62,362,3.711,363,3.711,364,2.62,365,2.62,366,2.62]],["title/controllers/TaskController.html",[0,1.319,367,1.846]],["body/controllers/TaskController.html",[0,0.737,2,0.82,3,0.25,4,0.25,5,0.297,7,0.283,8,0.632,10,2.873,11,0.039,12,0.975,14,0.975,15,0.705,16,0.218,19,0.319,20,0.319,21,0.737,22,1.176,23,1.083,25,0.021,26,0.017,54,0.601,56,0.601,57,3.191,58,0.544,59,0.544,68,0.629,95,1.101,96,1.101,97,1.101,104,2.171,105,2.171,107,1.184,108,1.864,114,1.37,115,1.37,116,1.37,121,1.055,132,1.37,133,2.697,136,1.37,138,2.14,144,3.346,145,2.52,149,2.171,150,2.171,151,1.37,203,1.37,220,1.452,222,1.031,225,2.031,227,1.176,228,2.052,248,1.635,253,1.176,265,1.452,267,2.031,268,3.074,277,1.031,292,2.031,334,2.52,367,1.635,368,2.171,369,3.346,370,3.069,371,2.637,372,3.728,373,2.171,374,1.37,375,1.664,376,1.664,377,1.37,378,3.057,379,1.664,380,1.664,381,1.664,382,1.664,383,1.664,384,2.637,385,1.664,386,1.664,387,1.37,388,2.697,389,1.664,390,1.664,391,1.664,392,1.37,393,1.614,394,1.37,395,1.664,396,1.664,397,1.664,398,1.664,399,1.664,400,1.664,401,4.065,402,1.664,403,3.277,404,3.277,405,1.664,406,1.664,407,1.664,408,2.637,409,1.664,410,1.664,411,1.664,412,1.664,413,1.664,414,1.664,415,1.664,416,1.664,417,1.664,418,1.664,419,1.664,420,1.664,421,1.664,422,1.664,423,1.664,424,2.637,425,1.664,426,1.664,427,2.637,428,1.664,429,1.664,430,1.664,431,1.664,432,1.664,433,1.664,434,1.664,435,1.664,436,1.664,437,1.664,438,1.664]],["title/modules/TaskModule.html",[27,1.076,40,1.639]],["body/modules/TaskModule.html",[2,2.093,3,0.478,4,0.478,5,0.359,11,0.039,15,0.796,16,0.417,19,0.816,20,0.612,25,0.027,26,0.027,27,1.726,29,1.883,30,1.413,31,1.756,32,1.756,33,1.413,34,2.629,35,2.629,40,3.065,42,2.338,43,1.756,44,1.756,46,1.977,47,1.977,48,1.152,57,1.977,59,1.042,300,2.625,367,2.961,393,2.91,394,2.625,439,2.625,440,2.625,441,2.625,442,3.189,443,3.189,444,3.189,445,3.189]],["title/injectables/TaskService.html",[77,0.284,393,1.467]],["body/injectables/TaskService.html",[3,0.288,4,0.288,5,0.216,7,0.327,8,0.707,11,0.039,12,1.042,14,0.966,15,0.604,16,0.251,19,0.368,20,0.368,23,1.158,25,0.019,26,0.019,48,0.693,54,1.065,57,2.962,58,1.742,59,0.627,68,0.835,77,0.281,78,0.627,95,1.284,96,1.284,97,1.284,107,1.297,121,1.179,138,2.132,185,1.179,190,2.497,202,3.057,206,1.189,207,1.056,208,1.189,211,1.976,215,1.579,220,1.623,225,1.827,228,2.784,253,2.083,267,1.189,268,1.189,347,2.427,369,2.427,370,2.427,373,2.427,374,2.427,377,2.427,378,3.243,387,2.427,388,2.955,393,1.452,446,1.579,447,2.948,448,1.918,449,1.918,450,2.948,451,1.918,452,1.918,453,2.948,454,1.918,455,4.028,456,1.918,457,1.918,458,1.918,459,2.948,460,1.918,461,1.918,462,1.918,463,1.579,464,1.918,465,4.028,466,1.918,467,1.918,468,1.918,469,1.918,470,1.918,471,1.918,472,1.579,473,1.579,474,1.918,475,1.918,476,2.948,477,1.918,478,2.948,479,2.427,480,1.918,481,1.918,482,1.918,483,1.918,484,2.948,485,1.918,486,1.918,487,1.918,488,1.356]],["title/modules/UserModule.html",[27,1.076,166,1.639]],["body/modules/UserModule.html",[3,0.517,4,0.517,5,0.388,11,0.039,15,0.788,16,0.451,25,0.029,26,0.029,27,1.793,29,1.528,30,1.528,31,1.898,32,1.898,33,1.528,34,2.461,35,2.461,42,2.461,43,1.898,44,1.898,46,2.137,47,2.137,48,1.246,54,1.246,56,1.616,58,1.461,59,1.126,166,3.068,187,2.889,489,2.838,490,2.838,491,2.838,492,3.447,493,3.447,494,3.447]],["title/injectables/UserService.html",[77,0.284,187,1.467]],["body/injectables/UserService.html",[3,0.276,4,0.276,5,0.207,7,0.313,8,0.684,11,0.039,12,0.945,14,1.082,15,0.591,16,0.241,19,0.353,20,0.353,23,0.932,25,0.018,26,0.018,48,0.665,54,1.424,56,1.424,58,1.885,59,0.601,68,0.756,70,2.349,77,0.272,78,0.601,83,1.925,95,1.163,96,1.163,97,1.163,107,0.665,110,2.471,121,1.141,138,1.998,185,1.141,187,1.406,189,2.471,190,3.165,191,2.471,201,2.442,202,3.272,206,1.14,207,1.013,208,2.167,209,1.3,210,1.3,211,1.013,214,2.017,225,2.442,228,2.591,239,2.349,255,1.515,378,2.471,392,2.878,463,2.349,472,2.349,473,3.714,479,2.878,495,1.515,496,2.854,497,2.854,498,1.84,499,1.84,500,2.854,501,2.854,502,1.84,503,2.854,504,2.854,505,2.854,506,2.854,507,4.512,508,2.854,509,2.854,510,1.84,511,3.94,512,3.94,513,2.854,514,1.84,515,2.854,516,3.496,517,1.84,518,2.854,519,1.84,520,1.84,521,1.84,522,1.84,523,1.84,524,1.84]],["title/coverage.html",[525,3.339]],["body/coverage.html",[0,2.019,1,2.054,5,0.327,6,2.393,11,0.039,17,1.802,25,0.026,26,0.026,33,1.288,41,1.6,68,0.558,77,0.535,79,2.393,86,2.054,87,2.393,88,2.393,121,1.162,134,1.802,135,2.393,154,1.288,167,1.6,168,1.6,183,2.393,187,1.432,257,2.393,265,1.6,277,1.802,278,2.393,279,2.393,289,2.054,295,2.054,304,2.393,326,2.393,333,2.054,334,1.802,336,2.393,367,1.802,368,2.393,393,1.432,446,2.393,488,4.184,495,2.393,525,2.393,526,2.393,527,2.906,528,2.906,529,4.555,530,5.308,531,2.906,532,3.989,533,2.906,534,2.906,535,2.393,536,4.555,537,4.903,538,3.284,539,2.393,540,2.906,541,2.906,542,2.906]],["title/dependencies.html",[30,1.586,543,2.05]],["body/dependencies.html",[11,0.04,16,0.388,25,0.026,26,0.026,30,1.315,48,1.072,51,1.839,101,2.443,153,1.462,171,2.097,207,1.633,288,2.097,314,3.255,315,2.443,331,2.443,544,2.967,545,2.967,546,2.967,547,5.466,548,2.967,549,2.967,550,2.967,551,4.046,552,3.331,553,2.967,554,2.967,555,5.176,556,2.967,557,2.967,558,2.967,559,4.046,560,2.967,561,2.967,562,2.967,563,2.967,564,2.967,565,4.046,566,2.967,567,2.967,568,2.967,569,2.967,570,2.967,571,2.967,572,2.967,573,2.967,574,2.967,575,2.967,576,2.967,577,2.967,578,2.967,579,2.967,580,2.967,581,2.967,582,2.967,583,2.967,584,2.443,585,2.967,586,2.967,587,2.967,588,2.967,589,2.967,590,2.967]],["title/miscellaneous/functions.html",[591,1.544,592,2.946]],["body/miscellaneous/functions.html",[7,0.771,11,0.034,25,0.034,26,0.034,33,2.483,539,3.727,591,2.807,592,3.727,593,4.528]],["title/index.html",[7,0.507,594,2.977]],["body/index.html",[5,0.41,11,0.035,25,0.03,26,0.03,85,2.995,111,2.995,222,2.255,242,2.995,292,2.255,344,2.995,526,2.995,584,2.995,595,3.638,596,4.628,597,3.638,598,3.638,599,5.654,600,5.532,601,5.09,602,3.638,603,3.638,604,4.628,605,3.638,606,4.628,607,3.638,608,3.638,609,3.638,610,3.638,611,3.638,612,3.638,613,2.572,614,3.638,615,3.638,616,3.638,617,3.638,618,3.638,619,3.638,620,3.638,621,3.638,622,3.638,623,3.638]],["title/modules.html",[29,1.797]],["body/modules.html",[11,0.033,25,0.033,26,0.033,28,2.625,29,1.877,39,2.331,40,2.331,166,2.331,552,4.652,624,5.65,625,5.65,626,5.65]],["title/overview.html",[613,2.867]],["body/overview.html",[2,1.493,11,0.038,25,0.027,26,0.027,27,1.095,28,3.466,29,1.343,30,1.343,31,1.668,32,1.668,33,1.343,34,1.668,35,1.668,36,2.495,37,2.495,38,2.495,39,3.183,40,2.959,41,2.562,42,2.259,43,1.668,44,1.668,78,0.99,154,2.063,163,2.495,164,2.495,165,2.495,166,2.959,167,2.562,168,2.562,187,2.708,333,2.142,393,2.708,439,2.495,440,2.495,441,2.495,488,2.142,489,2.495,490,2.495,491,2.495,613,2.142,627,3.03,628,3.03,629,3.03,630,3.03]],["title/properties.html",[543,2.05,631,2.946]],["body/properties.html",[11,0.037,25,0.034,26,0.034,631,3.747,632,4.552,633,4.552,634,4.552,635,4.552]],["title/routes.html",[636,3.339]],["body/routes.html",[11,0.035,25,0.035,26,0.035,636,3.871]],["title/miscellaneous/variables.html",[591,1.544,637,2.946]],["body/miscellaneous/variables.html",[7,0.672,11,0.038,25,0.031,26,0.031,63,2.443,68,0.757,83,2.679,245,4.346,265,3.035,289,3.44,295,3.44,296,3.245,535,3.245,538,3.245,591,2.443,637,3.245,638,4.866,639,3.941,640,5.279,641,3.941,642,3.941]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":488,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["0.0.0",{"_index":633,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["0.15.0",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["0.3.26",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":530,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":531,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":630,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["1.6.0",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["11.0.0",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["20.2.0",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["20.2.4",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["21.5.2",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":628,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":627,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["4.1.13",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["60m",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["7.8.0",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["8.5.6",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":629,"title":{},"body":{"overview.html":{}}}],["access",{"_index":344,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{}}}],["accesstoken",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["admin",{"_index":268,"title":{},"body":{"injectables/InitializationService.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["admins",{"_index":475,"title":{},"body":{"injectables/TaskService.html":{}}}],["already",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["angular/cdk",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["anonymous",{"_index":124,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["api",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["app.service",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["appmodule",{"_index":28,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../main.ts",{"_index":593,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../public.decorator.ts",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../roles.decorator.ts",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app/app.module.ts",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app/app.service.ts",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app/app.service.ts:5",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app/auth/auth.controller.ts",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["apps/api/src/app/auth/auth.controller.ts:12",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/app/auth/auth.controller.ts:18",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/app/auth/auth.module.ts",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/app/auth/auth.service.ts",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/app/auth/auth.service.ts:13",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/app/auth/auth.service.ts:23",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/app/auth/auth.service.ts:32",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/app/auth/auth.service.ts:54",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/app/auth/jwt.strategy.ts",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/app/auth/jwt.strategy.ts:15",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/app/auth/jwt.strategy.ts:7",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/app/auth/local.strategy.ts",{"_index":326,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["apps/api/src/app/auth/local.strategy.ts:13",{"_index":330,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["apps/api/src/app/auth/local.strategy.ts:8",{"_index":328,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["apps/api/src/app/initialization.service.ts",{"_index":257,"title":{},"body":{"injectables/InitializationService.html":{},"coverage.html":{}}}],["apps/api/src/app/initialization.service.ts:17",{"_index":261,"title":{},"body":{"injectables/InitializationService.html":{}}}],["apps/api/src/app/initialization.service.ts:9",{"_index":260,"title":{},"body":{"injectables/InitializationService.html":{}}}],["apps/api/src/app/task/task.controller.ts",{"_index":368,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["apps/api/src/app/task/task.controller.ts:30",{"_index":376,"title":{},"body":{"controllers/TaskController.html":{}}}],["apps/api/src/app/task/task.controller.ts:40",{"_index":383,"title":{},"body":{"controllers/TaskController.html":{}}}],["apps/api/src/app/task/task.controller.ts:48",{"_index":390,"title":{},"body":{"controllers/TaskController.html":{}}}],["apps/api/src/app/task/task.controller.ts:56",{"_index":380,"title":{},"body":{"controllers/TaskController.html":{}}}],["apps/api/src/app/task/task.controller.ts:64",{"_index":386,"title":{},"body":{"controllers/TaskController.html":{}}}],["apps/api/src/app/task/task.module.ts",{"_index":442,"title":{},"body":{"modules/TaskModule.html":{}}}],["apps/api/src/app/task/task.service.ts",{"_index":446,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["apps/api/src/app/task/task.service.ts:14",{"_index":451,"title":{},"body":{"injectables/TaskService.html":{}}}],["apps/api/src/app/task/task.service.ts:28",{"_index":454,"title":{},"body":{"injectables/TaskService.html":{}}}],["apps/api/src/app/task/task.service.ts:43",{"_index":456,"title":{},"body":{"injectables/TaskService.html":{}}}],["apps/api/src/app/task/task.service.ts:54",{"_index":452,"title":{},"body":{"injectables/TaskService.html":{}}}],["apps/api/src/app/task/task.service.ts:8",{"_index":449,"title":{},"body":{"injectables/TaskService.html":{}}}],["apps/api/src/app/user/user.module.ts",{"_index":492,"title":{},"body":{"modules/UserModule.html":{}}}],["apps/api/src/app/user/user.service.ts",{"_index":495,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/api/src/app/user/user.service.ts:23",{"_index":510,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/app/user/user.service.ts:32",{"_index":514,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/app/user/user.service.ts:45",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/app/user/user.service.ts:8",{"_index":499,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/api/src/common/decorators/roles.decorator.ts",{"_index":535,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/common/guards/jwt",{"_index":278,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/common/guards/role.guard.ts",{"_index":336,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["apps/api/src/common/guards/role.guard.ts:6",{"_index":337,"title":{},"body":{"guards/RolesGuard.html":{}}}],["apps/api/src/common/guards/role.guard.ts:9",{"_index":338,"title":{},"body":{"guards/RolesGuard.html":{}}}],["apps/api/src/common/interceptors/audit",{"_index":87,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"coverage.html":{}}}],["apps/api/src/common/public.decorator.ts",{"_index":538,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":539,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["appservice",{"_index":17,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["assigned",{"_index":481,"title":{},"body":{"injectables/TaskService.html":{}}}],["assignedto",{"_index":465,"title":{},"body":{"injectables/TaskService.html":{}}}],["assignment",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["audit",{"_index":132,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/TaskController.html":{}}}],["audit.log",{"_index":116,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/TaskController.html":{}}}],["auditloginterceptor",{"_index":86,"title":{"injectables/AuditLogInterceptor.html":{}},"body":{"injectables/AuditLogInterceptor.html":{},"coverage.html":{}}}],["auth",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":397,"title":{},"body":{"controllers/TaskController.html":{}}}],["auth.guard.ts",{"_index":279,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":287,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:8",{"_index":285,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":134,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard's",{"_index":302,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":281,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":39,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authservice",{"_index":154,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":405,"title":{},"body":{"controllers/TaskController.html":{}}}],["await",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["axios",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["based",{"_index":414,"title":{},"body":{"controllers/TaskController.html":{}}}],["bcryptjs",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["before",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["body",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["boolean",{"_index":339,"title":{},"body":{"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":626,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":552,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["call",{"_index":521,"title":{},"body":{"injectables/UserService.html":{}}}],["callhandler",{"_index":93,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["canactivate",{"_index":282,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":286,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["catch",{"_index":432,"title":{},"body":{"controllers/TaskController.html":{}}}],["category",{"_index":466,"title":{},"body":{"injectables/TaskService.html":{}}}],["check",{"_index":292,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"index.html":{}}}],["class",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["cluster_appmodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":439,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_exports",{"_index":441,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":440,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":489,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":490,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":491,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["common/decorators/roles.decorator",{"_index":398,"title":{},"body":{"controllers/TaskController.html":{}}}],["common/guards/jwt",{"_index":396,"title":{},"body":{"controllers/TaskController.html":{}}}],["common/guards/role.guard",{"_index":395,"title":{},"body":{"controllers/TaskController.html":{}}}],["compodoc:apiand",{"_index":619,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_sync_dev_mode",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["conflictexception",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{}}}],["conflictexception('audit",{"_index":436,"title":{},"body":{"controllers/TaskController.html":{}}}],["conflictexception('default",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('failed",{"_index":437,"title":{},"body":{"controllers/TaskController.html":{}}}],["conflictexception('user",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":130,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["console.log",{"_index":272,"title":{},"body":{"injectables/InitializationService.html":{}}}],["console.log('checking",{"_index":262,"title":{},"body":{"injectables/InitializationService.html":{}}}],["console.log('creating",{"_index":406,"title":{},"body":{"controllers/TaskController.html":{}}}],["console.log('fulluser",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('request",{"_index":407,"title":{},"body":{"controllers/TaskController.html":{}}}],["const",{"_index":107,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":327,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{}}}],["constructor(reflector",{"_index":283,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(rolerepository",{"_index":259,"title":{},"body":{"injectables/InitializationService.html":{}}}],["constructor(taskrepository",{"_index":448,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(userservice",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersrepository",{"_index":498,"title":{},"body":{"injectables/UserService.html":{}}}],["context",{"_index":98,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":299,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":298,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":109,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"guards/RolesGuard.html":{}}}],["control",{"_index":616,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":400,"title":{},"body":{"controllers/TaskController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["coverage",{"_index":525,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":402,"title":{},"body":{"controllers/TaskController.html":{}}}],["create(task",{"_index":374,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["create(user",{"_index":501,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":472,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["creates",{"_index":503,"title":{},"body":{"injectables/UserService.html":{}}}],["data",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"controllers/TaskController.html":{},"index.html":{}}}],["database",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["date().toisostring",{"_index":122,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["date.now",{"_index":113,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["db.sqlite",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["db_sync_dev_mode=true",{"_index":608,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":403,"title":{},"body":{"controllers/TaskController.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["default",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["defaultorganization",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["defaultrole",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["define",{"_index":348,"title":{},"body":{"guards/RolesGuard.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":370,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["delete(':id",{"_index":420,"title":{},"body":{"controllers/TaskController.html":{}}}],["delete(':id')@roles('owner",{"_index":379,"title":{},"body":{"controllers/TaskController.html":{}}}],["delete(@param('id",{"_index":421,"title":{},"body":{"controllers/TaskController.html":{}}}],["delete(id",{"_index":377,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["dependencies",{"_index":30,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":463,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["dev",{"_index":604,"title":{},"body":{"index.html":{}}}],["dnd",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["docs",{"_index":618,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":526,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dynamic",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["edit",{"_index":418,"title":{},"body":{"controllers/TaskController.html":{}}}],["email",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["enoent",{"_index":435,"title":{},"body":{"controllers/TaskController.html":{}}}],["entities",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":523,"title":{},"body":{"injectables/UserService.html":{}}}],["env",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":129,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["error",{"_index":433,"title":{},"body":{"controllers/TaskController.html":{}}}],["error.code",{"_index":434,"title":{},"body":{"controllers/TaskController.html":{}}}],["example",{"_index":600,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":91,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["exists",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["explanation",{"_index":615,"title":{},"body":{"index.html":{}}}],["export",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":280,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fetch",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":622,"title":{},"body":{"index.html":{}}}],["filter(boolean",{"_index":429,"title":{},"body":{"controllers/TaskController.html":{}}}],["findall",{"_index":371,"title":{},"body":{"controllers/TaskController.html":{}}}],["findall(@request",{"_index":410,"title":{},"body":{"controllers/TaskController.html":{}}}],["findall(req",{"_index":381,"title":{},"body":{"controllers/TaskController.html":{}}}],["findallforuser",{"_index":447,"title":{},"body":{"injectables/TaskService.html":{}}}],["findallforuser(user",{"_index":453,"title":{},"body":{"injectables/TaskService.html":{}}}],["findone",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["findone(email",{"_index":509,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyidwithroleandorg",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyidwithroleandorg(id",{"_index":513,"title":{},"body":{"injectables/UserService.html":{}}}],["finds",{"_index":511,"title":{},"body":{"injectables/UserService.html":{}}}],["folder",{"_index":620,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":340,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception(`your",{"_index":366,"title":{},"body":{"guards/RolesGuard.html":{}}}],["found",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["fs",{"_index":104,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/TaskController.html":{}}}],["fs.appendfile(logpath",{"_index":126,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["fs.readfilesync(logpath",{"_index":425,"title":{},"body":{"controllers/TaskController.html":{}}}],["fulluser",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["fulluser.id",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["fulluser.organization.id",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["fulluser.role.name",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":592,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('audit",{"_index":384,"title":{},"body":{"controllers/TaskController.html":{}}}],["get()@roles('owner",{"_index":382,"title":{},"body":{"controllers/TaskController.html":{}}}],["getauditlog",{"_index":372,"title":{},"body":{"controllers/TaskController.html":{}}}],["getdata",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["granted",{"_index":345,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guard",{"_index":333,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":335,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handles",{"_index":404,"title":{},"body":{"controllers/TaskController.html":{}}}],["hashes",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["haspermission",{"_index":363,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hello",{"_index":84,"title":{},"body":{"injectables/AppService.html":{}}}],["hierarchy",{"_index":349,"title":{},"body":{"guards/RolesGuard.html":{}}}],["higher",{"_index":350,"title":{},"body":{"guards/RolesGuard.html":{}}}],["html",{"_index":621,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/api",{"_index":623,"title":{},"body":{"index.html":{}}}],["id",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implementation",{"_index":617,"title":{},"body":{"index.html":{}}}],["implements",{"_index":106,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"injectables/InitializationService.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["including",{"_index":515,"title":{},"body":{"injectables/UserService.html":{}}}],["incomplete",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["initial",{"_index":263,"title":{},"body":{"injectables/InitializationService.html":{}}}],["initialization.service",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["initializationservice",{"_index":41,"title":{"injectables/InitializationService.html":{}},"body":{"modules/AppModule.html":{},"injectables/InitializationService.html":{},"coverage.html":{},"overview.html":{}}}],["inject",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":77,"title":{"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["injectrepository(organization",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/UserService.html":{}}}],["injectrepository(role",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/UserService.html":{}}}],["injectrepository(task",{"_index":458,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectrepository(user",{"_index":517,"title":{},"body":{"injectables/UserService.html":{}}}],["install",{"_index":597,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":89,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["intercept(context",{"_index":90,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["is_public_key",{"_index":289,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isglobal",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["ispublic",{"_index":296,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["json.parse(line",{"_index":431,"title":{},"body":{"controllers/TaskController.html":{}}}],["json.stringify(logentry",{"_index":127,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["jwt",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret=44f86fa407c054c18abd91ee02d52ff3b6a0ab7e998aa711eda3f217badc2cfd",{"_index":607,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":277,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":167,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["legend",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":634,"title":{},"body":{"properties.html":{}}}],["list",{"_index":411,"title":{},"body":{"controllers/TaskController.html":{}}}],["lite",{"_index":610,"title":{},"body":{"index.html":{}}}],["literal",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["local",{"_index":331,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":168,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":133,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/TaskController.html":{}}}],["log')@roles('owner",{"_index":385,"title":{},"body":{"controllers/TaskController.html":{}}}],["log.interceptor.ts",{"_index":88,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"coverage.html":{}}}],["log.interceptor.ts:14",{"_index":94,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["logdata",{"_index":424,"title":{},"body":{"controllers/TaskController.html":{}}}],["logentries",{"_index":427,"title":{},"body":{"controllers/TaskController.html":{}}}],["logentry",{"_index":119,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["login",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["logpath",{"_index":114,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/TaskController.html":{}}}],["map((line",{"_index":430,"title":{},"body":{"controllers/TaskController.html":{}}}],["marked",{"_index":294,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["matching",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":351,"title":{},"body":{"guards/RolesGuard.html":{}}}],["meet",{"_index":361,"title":{},"body":{"guards/RolesGuard.html":{}}}],["message",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["metadata",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":110,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["microsoft",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{}}}],["miscellaneous",{"_index":591,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":635,"title":{},"body":{"properties.html":{}}}],["modearchitecture",{"_index":612,"title":{},"body":{"index.html":{}}}],["model",{"_index":614,"title":{},"body":{"index.html":{}}}],["module",{"_index":27,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":29,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":352,"title":{},"body":{"guards/RolesGuard.html":{}}}],["n",{"_index":128,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["name",{"_index":96,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["need",{"_index":445,"title":{},"body":{"modules/TaskModule.html":{}}}],["nestinterceptor",{"_index":100,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["nestjs/common",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":288,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":121,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newly",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["newtask",{"_index":459,"title":{},"body":{"injectables/TaskService.html":{}}}],["newuser",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["newuser.hashpassword",{"_index":520,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":92,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["next.handle().pipe",{"_index":117,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["ngx",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["nodejs",{"_index":598,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":457,"title":{},"body":{"injectables/TaskService.html":{}}}],["notfoundexception(`task",{"_index":484,"title":{},"body":{"injectables/TaskService.html":{}}}],["now",{"_index":112,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["npm",{"_index":601,"title":{},"body":{"index.html":{}}}],["null",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":378,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["nx/nest",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":473,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["observable",{"_index":99,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["onmoduleinit",{"_index":258,"title":{},"body":{"injectables/InitializationService.html":{}}}],["optional",{"_index":97,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["organization",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["organizationrepository",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/UserService.html":{}}}],["orgexists",{"_index":275,"title":{},"body":{"injectables/InitializationService.html":{}}}],["orgid",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["orgname",{"_index":274,"title":{},"body":{"injectables/InitializationService.html":{}}}],["out",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":613,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":267,"title":{},"body":{"injectables/InitializationService.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["owners",{"_index":474,"title":{},"body":{"injectables/TaskService.html":{}}}],["package",{"_index":543,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":392,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":95,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["parent",{"_index":301,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["partial",{"_index":388,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["pass",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["path",{"_index":105,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/TaskController.html":{}}}],["path.join(__dirname",{"_index":115,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/TaskController.html":{}}}],["payload",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.orgid",{"_index":325,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":324,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["permissions",{"_index":353,"title":{},"body":{"guards/RolesGuard.html":{}}}],["post",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["post('login",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@roles('owner",{"_index":375,"title":{},"body":{"controllers/TaskController.html":{}}}],["postcss",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["prefix",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["private",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["promise",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":631,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":295,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":290,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["put",{"_index":391,"title":{},"body":{"controllers/TaskController.html":{}}}],["put(':id",{"_index":416,"title":{},"body":{"controllers/TaskController.html":{}}}],["put(':id')@roles('owner",{"_index":389,"title":{},"body":{"controllers/TaskController.html":{}}}],["rbac",{"_index":595,"title":{},"body":{"index.html":{}}}],["rbac/auth",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["read",{"_index":438,"title":{},"body":{"controllers/TaskController.html":{}}}],["readme",{"_index":594,"title":{"index.html":{}},"body":{}}],["readonly",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskController.html":{}}}],["reflect",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":284,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(user",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(userdto",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["relations",{"_index":479,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["req.user",{"_index":408,"title":{},"body":{"controllers/TaskController.html":{}}}],["request",{"_index":108,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["required",{"_index":362,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredindex",{"_index":365,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles",{"_index":341,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.map(role",{"_index":358,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredrolesindexes",{"_index":357,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredrolesindexes.some(requiredindex",{"_index":364,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolves",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["responsetime",{"_index":118,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["responsetime}ms",{"_index":125,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["result",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{}}}],["result.affected",{"_index":487,"title":{},"body":{"injectables/TaskService.html":{}}}],["results",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["role",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["roleexists",{"_index":270,"title":{},"body":{"injectables/InitializationService.html":{}}}],["rolehierarchy",{"_index":354,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolehierarchy.indexof(role",{"_index":359,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolehierarchy.indexof(userrolename",{"_index":356,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolename",{"_index":269,"title":{},"body":{"injectables/InitializationService.html":{}}}],["rolerepository",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/UserService.html":{}}}],["roles",{"_index":265,"title":{},"body":{"injectables/InitializationService.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('owner",{"_index":401,"title":{},"body":{"controllers/TaskController.html":{}}}],["rolesguard",{"_index":334,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["rolestoseed",{"_index":266,"title":{},"body":{"injectables/InitializationService.html":{}}}],["route",{"_index":293,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["routes",{"_index":636,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":599,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":101,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":103,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["sample",{"_index":606,"title":{},"body":{"index.html":{}}}],["saving",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["scopes",{"_index":413,"title":{},"body":{"controllers/TaskController.html":{}}}],["search",{"_index":516,"title":{},"body":{"injectables/UserService.html":{}}}],["secret",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":476,"title":{},"body":{"injectables/TaskService.html":{}}}],["seed",{"_index":264,"title":{},"body":{"injectables/InitializationService.html":{}}}],["seeded",{"_index":273,"title":{},"body":{"injectables/InitializationService.html":{}}}],["server",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["service",{"_index":412,"title":{},"body":{"controllers/TaskController.html":{}}}],["setmetadata('roles",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":596,"title":{},"body":{"index.html":{}}}],["setupto",{"_index":602,"title":{},"body":{"index.html":{}}}],["shared",{"_index":522,"title":{},"body":{"injectables/UserService.html":{}}}],["side",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":343,"title":{},"body":{"guards/RolesGuard.html":{}}}],["split('\\n",{"_index":428,"title":{},"body":{"controllers/TaskController.html":{}}}],["sql",{"_index":609,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["sqlite3",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["start",{"_index":603,"title":{},"body":{"index.html":{}}}],["start.env",{"_index":605,"title":{},"body":{"index.html":{}}}],["statements",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":468,"title":{},"body":{"injectables/TaskService.html":{}}}],["strategy",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["sufficient",{"_index":360,"title":{},"body":{"guards/RolesGuard.html":{}}}],["super",{"_index":291,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":303,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":624,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":625,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":584,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["sync",{"_index":611,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":542,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["tailwindcss",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["tailwindcss/postcss",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["tap",{"_index":102,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["task",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["task.category",{"_index":467,"title":{},"body":{"injectables/TaskService.html":{}}}],["task.controller",{"_index":443,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.description",{"_index":464,"title":{},"body":{"injectables/TaskService.html":{}}}],["task.service",{"_index":394,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.title",{"_index":462,"title":{},"body":{"injectables/TaskService.html":{}}}],["task/task.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["taskcontroller",{"_index":367,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskmodule",{"_index":40,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskrepository",{"_index":450,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasks",{"_index":369,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["taskservice",{"_index":393,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["this.appservice.getdata",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(user",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":332,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.jwtservice.sign(payload",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.organizationrepository.findone",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{}}}],["this.organizationrepository.save",{"_index":276,"title":{},"body":{"injectables/InitializationService.html":{}}}],["this.reflector.get('roles",{"_index":342,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":297,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.rolerepository.findone",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{}}}],["this.rolerepository.save",{"_index":271,"title":{},"body":{"injectables/InitializationService.html":{}}}],["this.taskrepository.create",{"_index":460,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.delete(id",{"_index":486,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.find",{"_index":478,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.insert(newtask",{"_index":471,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.preload",{"_index":483,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save(task",{"_index":485,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.create(task",{"_index":409,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.delete(id",{"_index":422,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findallforuser(req.user",{"_index":415,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.update(id",{"_index":419,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.userservice.create(userdto",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone(userdto.email",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone(username",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyidwithroleandorg(user.id",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.create(user",{"_index":519,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.findone",{"_index":518,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.save(newuser",{"_index":524,"title":{},"body":{"injectables/UserService.html":{}}}],["throw",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["timestamp",{"_index":120,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["title",{"_index":461,"title":{},"body":{"injectables/TaskService.html":{}}}],["todo",{"_index":469,"title":{},"body":{"injectables/TaskService.html":{}}}],["true",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":423,"title":{},"body":{"controllers/TaskController.html":{}}}],["type",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":494,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":444,"title":{},"body":{"modules/TaskModule.html":{}}}],["typeormmodule.forrootasync",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('user",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":512,"title":{},"body":{"injectables/UserService.html":{}}}],["unknown",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskController.html":{}}}],["update",{"_index":373,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["update(@param('id",{"_index":417,"title":{},"body":{"controllers/TaskController.html":{}}}],["update(id",{"_index":387,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatedtask",{"_index":455,"title":{},"body":{"injectables/TaskService.html":{}}}],["url",{"_index":111,"title":{},"body":{"injectables/AuditLogInterceptor.html":{},"index.html":{}}}],["use",{"_index":300,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"modules/TaskModule.html":{}}}],["usefactory",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["useguards(authguard('local",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":399,"title":{},"body":{"controllers/TaskController.html":{}}}],["useguards(undefined)@post('login",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuditLogInterceptor.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user's",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{}}}],["user.email",{"_index":123,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["user.id",{"_index":482,"title":{},"body":{"injectables/TaskService.html":{}}}],["user.organization",{"_index":470,"title":{},"body":{"injectables/TaskService.html":{}}}],["user.role.name",{"_index":347,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/TaskService.html":{}}}],["user.service",{"_index":493,"title":{},"body":{"modules/UserModule.html":{}}}],["user.validatepassword(pass",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["user/user.service",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto.organization",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usermodule",{"_index":166,"title":{"modules/UserModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["userroleindex",{"_index":355,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userrolename",{"_index":346,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userservice",{"_index":187,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersrepository",{"_index":500,"title":{},"body":{"injectables/UserService.html":{}}}],["utf8",{"_index":426,"title":{},"body":{"controllers/TaskController.html":{}}}],["validate",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":329,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":637,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":632,"title":{},"body":{"properties.html":{}}}],["viewer",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/InitializationService.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{}}}],["viewers",{"_index":480,"title":{},"body":{"injectables/TaskService.html":{}}}],["within",{"_index":477,"title":{},"body":{"injectables/TaskService.html":{}}}],["writing",{"_index":131,"title":{},"body":{"injectables/AuditLogInterceptor.html":{}}}],["zone.js",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in apps/api/src/app/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nInitializationService\n\nInitializationService\n\nAppModule -->\n\nInitializationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InitializationService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TaskModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { TaskModule } from './task/task.module';\nimport { Organization, Permission, Role, Task, User } from '@rbac/auth';\nimport { InitializationService } from './initialization.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: '.env',\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'sqlite',\n        database: 'db.sqlite',\n        entities: [User, Task, Role, Permission, Organization],\n        synchronize: configService.get('DB_SYNC_DEV_MODE') === 'true',\n      }),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forFeature([Role, Organization]), // \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Hello API' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditLogInterceptor.html":{"url":"injectables/AuditLogInterceptor.html","title":"injectable - AuditLogInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditLogInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/common/interceptors/audit-log.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/common/interceptors/audit-log.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n@Injectable()\nexport class AuditLogInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const request = context.switchToHttp().getRequest();\n    const { method, url, user } = request;\n    const now = Date.now();\n    const logPath = path.join(__dirname, '..', '..', 'audit.log');\n\n    return next.handle().pipe(\n      tap(() => {\n        const responseTime = Date.now() - now;\n        const logEntry = {\n          timestamp: new Date().toISOString(),\n          user: user ? user.email : 'anonymous',\n          method,\n          url,\n          responseTime: `${responseTime}ms`,\n        };\n\n        fs.appendFile(logPath, JSON.stringify(logEntry) + '\\n', (err) => {\n          if (err) console.error('Error writing to audit log:', err);\n        });\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/auth/auth.controller.ts\n        \n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in apps/api/src/app/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in apps/api/src/app/auth/auth.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // apps/api/src/app/auth/auth.controller.ts\nimport { Controller, Post, Body, UseGuards, Request } from '@nestjs/common';\nimport { User } from '@rbac/auth';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('register')\n  async register(@Body() user: User) {\n    return this.authService.register(user);\n  }\n\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Organization, Role } from '@rbac/auth';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    TypeOrmModule.forFeature([Role, Organization]),\n    JwtModule.registerAsync({\n      //  ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '60m' },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, LocalStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, roleRepository: Repository, organizationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        organizationRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/auth/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(userDto: User)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/auth/auth.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userDto\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/auth/auth.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '../user/user.service';\nimport { Organization, Role, User } from '@rbac/auth';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n    @InjectRepository(Role)\n    private roleRepository: Repository,\n    @InjectRepository(Organization)\n    private organizationRepository: Repository\n  ) {}\n\n  async validateUser(username: string, pass: string): Promise {\n    const user = await this.userService.findOne(username);\n    if (user && (await user.validatePassword(pass))) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    // Fetch the user with their role and organization\n    const fullUser = await this.userService.findOneByIdWithRoleAndOrg(user.id);\n\n    if (!fullUser) {\n      throw new UnauthorizedException('User data incomplete');\n    }\n\n    console.log('fullUser:', fullUser);\n\n    // Create the payload with the user's ID, role, and organization ID\n    const payload = {\n      sub: fullUser.id,\n      role: fullUser.role.name,\n      orgId: fullUser.organization.id,\n    };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  async register(userDto: User) {\n    const userExists = await this.userService.findOne(userDto.email);\n    if (userExists) {\n      throw new ConflictException('User with this email already exists.');\n    }\n\n    // Server-side assignment of default role and organization\n    // const defaultRole = await this.roleRepository.findOne({\n    //   where: { name: 'Viewer' },\n    // });\n    const defaultOrganization = await this.organizationRepository.findOne({\n      where: { name: 'Microsoft' },\n    });\n\n    if (!defaultOrganization) {\n      throw new ConflictException('Default role or organization not found.');\n    }\n\n    userDto.organization = defaultOrganization;\n\n    const newUser = await this.userService.create(userDto);\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InitializationService.html":{"url":"injectables/InitializationService.html","title":"injectable - InitializationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  InitializationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/initialization.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleRepository: Repository, organizationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/initialization.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        organizationRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/initialization.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Role } from '@rbac/auth';\nimport { Organization } from '@rbac/auth';\n\n@Injectable()\nexport class InitializationService implements OnModuleInit {\n  constructor(\n    @InjectRepository(Role)\n    private roleRepository: Repository,\n    @InjectRepository(Organization)\n    private organizationRepository: Repository\n  ) {}\n\n  async onModuleInit() {\n    console.log('Checking for initial seed data...');\n\n    // Seed Roles\n    const rolesToSeed = ['Owner', 'Admin', 'Viewer'];\n    for (const roleName of rolesToSeed) {\n      const roleExists = await this.roleRepository.findOne({\n        where: { name: roleName },\n      });\n      if (!roleExists) {\n        await this.roleRepository.save({ name: roleName });\n        console.log(`- Seeded role: ${roleName}`);\n      }\n    }\n\n    // Seed Organization\n    const orgName = 'Microsoft';\n    const orgExists = await this.organizationRepository.findOne({\n      where: { name: orgName },\n    });\n    if (!orgExists) {\n      await this.organizationRepository.save({ name: orgName });\n      console.log(`- Seeded organization: ${orgName}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/common/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/common/guards/jwt-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/common/guards/jwt-auth.guard.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\nimport { IS_PUBLIC_KEY } from '../public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    // Check if the route is marked as public\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    // If not public, use the parent AuthGuard's canActivate method\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/auth/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n  async validate(payload: any) {\n    return {\n      userId: payload.sub,\n      username: payload.username,\n      role: { name: payload.role },\n      organization: { id: payload.orgId },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/auth/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/auth/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/auth/local.strategy.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n                File\n            \n            \n                apps/api/src/common/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/common/guards/role.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/common/guards/role.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.get('roles', context.getHandler());\n\n    if (!requiredRoles) {\n      return true; // No roles specified, access granted\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n    const userRoleName = user.role.name;\n\n    // Define the role hierarchy. A higher index means more permissions.\n    const roleHierarchy = ['Viewer', 'Admin', 'Owner'];\n\n    const userRoleIndex = roleHierarchy.indexOf(userRoleName);\n    const requiredRolesIndexes = requiredRoles.map(role => roleHierarchy.indexOf(role));\n\n    // Check if the user's role is sufficient to meet any of the required roles\n    const hasPermission = requiredRolesIndexes.some(requiredIndex => userRoleIndex >= requiredIndex);\n\n    if (!hasPermission) {\n      throw new ForbiddenException(`Your role '${userRoleName}' does not have the required permissions.`);\n    }\n\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/task/task.controller.ts\n        \n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAuditLog\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(task: Task, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles('Owner')\n                \n            \n\n                    \n                        \n                            Defined in apps/api/src/app/task/task.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                        Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Roles('Owner', 'Admin')\n                \n            \n\n                    \n                        \n                            Defined in apps/api/src/app/task/task.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('Owner', 'Admin', 'Viewer')\n                \n            \n\n                    \n                        \n                            Defined in apps/api/src/app/task/task.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAuditLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuditLog()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('audit-log')@Roles('Owner', 'Admin')\n                \n            \n\n                    \n                        \n                            Defined in apps/api/src/app/task/task.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, task: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@Roles('Owner', 'Admin')\n                \n            \n\n                    \n                        \n                            Defined in apps/api/src/app/task/task.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                task\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // apps/api/src/app/task/task.controller.ts\nimport {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Put,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n  ConflictException,\n} from '@nestjs/common';\n\nimport { Task } from '@rbac/auth';\nimport { TaskService } from './task.service';\nimport { RolesGuard } from '../../common/guards/role.guard';\nimport { JwtAuthGuard } from '../../common/guards/jwt-auth.guard';\nimport { Roles } from '../../common/decorators/roles.decorator';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Controller('tasks')\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  @Post()\n  @Roles('Owner')\n  async create(@Body() task: Task, @Request() req) {\n    // Only 'Owner' can create tasks.\n    // The RolesGuard decorator handles this check automatically.\n    console.log('Creating task with data:', task);\n    console.log('Request user:', req.user);\n    return this.taskService.create(task, req.user);\n  }\n\n  @Get()\n  @Roles('Owner', 'Admin', 'Viewer')\n  async findAll(@Request() req) {\n    // All roles can list tasks, but the service scopes the results\n    // based on the user's role and organization.\n    return this.taskService.findAllForUser(req.user);\n  }\n\n  @Put(':id')\n  @Roles('Owner', 'Admin')\n  async update(@Param('id') id: number, @Body() task: Partial) {\n    // Only 'Owner' and 'Admin' can edit tasks.\n    // The RolesGuard decorator handles this check.\n    return this.taskService.update(id, task);\n  }\n\n  @Delete(':id')\n  @Roles('Owner', 'Admin')\n  async delete(@Param('id') id: number) {\n    // Only 'Owner' and 'Admin' can delete tasks.\n    // The RolesGuard decorator handles this check.\n    return this.taskService.delete(id);\n  }\n\n  @Get('audit-log')\n  @Roles('Owner', 'Admin')\n  async getAuditLog() {\n    const logPath = path.join(__dirname, '..', '..', 'audit.log');\n    try {\n      const logData = fs.readFileSync(logPath, 'utf8');\n      const logEntries = logData\n        .split('\\n')\n        .filter(Boolean)\n        .map((line) => JSON.parse(line));\n      return logEntries;\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        throw new ConflictException('Audit log file not found.');\n      }\n      throw new ConflictException('Failed to read audit log.');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_TaskModule_exports\n\n\n\n\nTaskService \n\nTaskService \n\n\n\nTaskModule\n\nTaskModule\n\nTaskService  -->\n\nTaskModule->TaskService \n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app/task/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TaskService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskController } from './task.controller';\nimport { TaskService } from './task.service';\nimport { Task } from '@rbac/auth';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Task]),\n  ],\n  controllers: [TaskController],\n  providers: [TaskService],\n  exports: [TaskService], // Export TaskService if other modules need to use it\n})\nexport class TaskModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/task/task.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAllForUser\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/task/task.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(task: Task, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/task/task.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                        Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/task/task.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllForUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllForUser(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/task/task.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updatedTask: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/task/task.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedTask\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Task, User } from '@rbac/auth';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class TaskService {\n  constructor(\n    @InjectRepository(Task)\n    private taskRepository: Repository\n  ) {}\n\n  async create(task: Task, user: User): Promise {\n    const newTask = this.taskRepository.create({\n      title: task.title,\n      description: task.description,\n      assignedTo: user,\n      category: task.category,\n      status: 'Todo',\n      organization: user.organization,\n    });\n    await this.taskRepository.insert(newTask); //\n\n    return newTask; // Return the created object\n  }\n\n  async findAllForUser(user: User): Promise {\n    if (user.role.name === 'Owner' || user.role.name === 'Admin') {\n      // Owners and Admins can see all tasks within their organization\n      return this.taskRepository.find({\n        relations: ['assignedTo'],\n      });\n    }\n\n    // Viewers can only see tasks assigned to them\n    return this.taskRepository.find({\n      where: { assignedTo: { id: user.id } },\n      relations: ['assignedTo'],\n    });\n  }\n\n  async update(id: number, updatedTask: Partial): Promise {\n    const task = await this.taskRepository.preload({\n      id: id,\n      ...updatedTask,\n    });\n    if (!task) {\n      throw new NotFoundException(`Task with ID ${id} not found.`);\n    }\n    return this.taskRepository.save(task);\n  }\n\n  async delete(id: number): Promise {\n    const result = await this.taskRepository.delete(id);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Task with ID ${id} not found.`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Organization, Role, User } from '@rbac/auth';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      User,\n      Role, // \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByIdWithRoleAndOrg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, roleRepository: Repository, organizationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app/user/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        organizationRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/user/user.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Creates a new user in the database.\nThis method hashes the password before saving the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user object to create.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the newly created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/user/user.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Finds a user by their username.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the User object or undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByIdWithRoleAndOrg\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByIdWithRoleAndOrg(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/api/src/app/user/user.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Finds a user by their ID, including their role and organization relations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID to search for.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to the User object or undefined.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Organization, Role, User } from '@rbac/auth';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    @InjectRepository(Role)\n    private roleRepository: Repository,\n    @InjectRepository(Organization)\n    private organizationRepository: Repository\n  ) {}\n\n  /**\n   * Finds a user by their username.\n   * @param username The username to search for.\n   * @returns A promise that resolves to the User object or undefined.\n   */\n  async findOne(email: string): Promise {\n    return this.usersRepository.findOne({ where: { email } });\n  }\n\n  /**\n   * Finds a user by their ID, including their role and organization relations.\n   * @param id The user ID to search for.\n   * @returns A promise that resolves to the User object or undefined.\n   */\n  async findOneByIdWithRoleAndOrg(id: number): Promise {\n    return this.usersRepository.findOne({\n      where: { id },\n      relations: ['role', 'organization'],\n    });\n  }\n\n  /**\n   * Creates a new user in the database.\n   * This method hashes the password before saving the user.\n   * @param user The user object to create.\n   * @returns A promise that resolves to the newly created user.\n   */\n  async create(user: User): Promise {\n    const newUser = this.usersRepository.create(user);\n    await newUser.hashPassword(); // Call the method from the shared entity\n    return this.usersRepository.save(newUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        apps/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        apps/api/src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        apps/api/src/app/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        apps/api/src/app/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        apps/api/src/app/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        apps/api/src/app/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        apps/api/src/app/initialization.service.ts\n            \n            injectable\n            InitializationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        apps/api/src/app/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        apps/api/src/app/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        apps/api/src/app/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                        apps/api/src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/api/src/common/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        apps/api/src/common/guards/role.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        apps/api/src/common/interceptors/audit-log.interceptor.ts\n            \n            injectable\n            AuditLogInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        apps/api/src/common/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/api/src/common/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/cdk : ^20.2.4\n        \n            @angular/common : ~20.2.0\n        \n            @angular/compiler : ~20.2.0\n        \n            @angular/core : ~20.2.0\n        \n            @angular/forms : ~20.2.0\n        \n            @angular/platform-browser : ~20.2.0\n        \n            @angular/platform-browser-dynamic : ~20.2.0\n        \n            @angular/router : ~20.2.0\n        \n            @nestjs/common : ^11.0.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nx/nest : ^21.5.2\n        \n            @tailwindcss/postcss : ^4.1.13\n        \n            axios : ^1.6.0\n        \n            bcryptjs : ^3.0.2\n        \n            ngx-dnd : ^2.0.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            postcss : ^8.5.6\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.8.0\n        \n            sqlite3 : ^5.1.7\n        \n            swagger-ui-express : ^5.0.1\n        \n            tailwindcss : ^4.1.13\n        \n            typeorm : ^0.3.26\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\nRbac\nSetup\nTo setup, \nInstall NodeJs, then run:\nExample :npm run setupTo start dev server\nExample :npm run start.env file sample\nExample :JWT_SECRET=44f86fa407c054c18abd91ee02d52ff3b6a0ab7e998aa711eda3f217badc2cfd // sample\nDB_SYNC_DEV_MODE=true // To run SQL lite in dev sync modeArchitecture Overview\nData Model Explanation\nAccess Control Implementation\nAPI Docs\nRun \nExample :npm run compodoc:apiand check the documentation folder html files\nSwagger URL\nExample :http://localhost:3000/api\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_exports\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nTaskService \n\nTaskService \n\nTaskService  -->\n\nTaskModule->TaskService \n\n\n\n\n\nInitializationService\n\nInitializationService\n\nAppModule -->\n\nInitializationService->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            Roles   (apps/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/common/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
